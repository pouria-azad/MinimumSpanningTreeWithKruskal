// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimumSpanningTreeWithKruskal.Models;

#nullable disable

namespace MinimumSpanningTreeWithKruskal.Migrations
{
    [DbContext(typeof(GraphDbContext))]
    [Migration("20250623074318_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MinimumSpanningTreeWithKruskal.Models.Edge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Node1Id")
                        .HasColumnType("int");

                    b.Property<int>("Node2Id")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Node1Id");

                    b.HasIndex("Node2Id");

                    b.ToTable("Edges");
                });

            modelBuilder.Entity("MinimumSpanningTreeWithKruskal.Models.MSTEdge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EdgeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EdgeId");

                    b.ToTable("MSTEdges");
                });

            modelBuilder.Entity("MinimumSpanningTreeWithKruskal.Models.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("MinimumSpanningTreeWithKruskal.Models.Edge", b =>
                {
                    b.HasOne("MinimumSpanningTreeWithKruskal.Models.Node", "Node1")
                        .WithMany("EdgesAsNode1")
                        .HasForeignKey("Node1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MinimumSpanningTreeWithKruskal.Models.Node", "Node2")
                        .WithMany("EdgesAsNode2")
                        .HasForeignKey("Node2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Node1");

                    b.Navigation("Node2");
                });

            modelBuilder.Entity("MinimumSpanningTreeWithKruskal.Models.MSTEdge", b =>
                {
                    b.HasOne("MinimumSpanningTreeWithKruskal.Models.Edge", "Edge")
                        .WithMany()
                        .HasForeignKey("EdgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edge");
                });

            modelBuilder.Entity("MinimumSpanningTreeWithKruskal.Models.Node", b =>
                {
                    b.Navigation("EdgesAsNode1");

                    b.Navigation("EdgesAsNode2");
                });
#pragma warning restore 612, 618
        }
    }
}
